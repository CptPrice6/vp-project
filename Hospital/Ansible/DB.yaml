---
  - name: Setup PostgreSQL on db-vm using Docker
    hosts: db
    become: true

    vars:
      postgres_user: "hospitaluser"
      postgres_password: "password123"
      postgres_db: "hospitaldb"
      postgres_port: 5432
      postgres_env_file: /opt/postgres.env
      init_sql_file: /opt/init.sql

    tasks:
      - name: Update apt packages
        apt:
          update_cache: yes

      - name: Ensure required Python packages are installed
        apt:
          name:
            - python3-pip
            - python3-requests
          state: present

      - name: Install prerequisites
        apt:
          name:
            - apt-transport-https
            - ca-certificates
            - curl
            - software-properties-common
          state: present

      - name: Add Docker GPG key
        apt_key:
          url: https://download.docker.com/linux/debian/gpg
          state: present
          keyring: /usr/share/keyrings/docker-archive-keyring.gpg

      - name: Add Docker repository
        copy:
          dest: /etc/apt/sources.list.d/docker.list
          content: "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/debian {{ ansible_facts['lsb']['codename'] }} stable"

      - name: Update apt cache
        apt:
          update_cache: yes

      - name: Install Docker packages
        apt:
          name:
            - docker-ce
            - docker-ce-cli
            - containerd.io
          state: present

      - name: Ensure Docker service is running
        service:
          name: docker
          state: started
          enabled: true

      - name: Create environment file for PostgreSQL
        copy:
          dest: "{{ postgres_env_file }}"
          content: |
            POSTGRES_USER={{ postgres_user }}
            POSTGRES_PASSWORD={{ postgres_password }}
            POSTGRES_DB={{ postgres_db }}
          mode: "0644"

      - name: Create init.sql file with schema, sequences, constraints, and data
        copy:
          dest: "{{ init_sql_file }}"
          content: |
            -- Database initialization script

            -- Basic settings
            SET statement_timeout = 0;
            SET lock_timeout = 0;
            SET idle_in_transaction_session_timeout = 0;
            SET client_encoding = 'UTF8';
            SET standard_conforming_strings = on;
            SELECT pg_catalog.set_config('search_path', '', false);
            SET check_function_bodies = false;
            SET xmloption = content;
            SET client_min_messages = warning;
            SET row_security = off;

            -- Sequences
            CREATE SEQUENCE public.appointments_id_seq AS integer START WITH 1 INCREMENT BY 1 NO MINVALUE NO MAXVALUE CACHE 1;
            ALTER SEQUENCE public.appointments_id_seq OWNER TO {{ postgres_user }};
            CREATE SEQUENCE public.doctors_id_seq AS integer START WITH 1 INCREMENT BY 1 NO MINVALUE NO MAXVALUE CACHE 1;
            ALTER SEQUENCE public.doctors_id_seq OWNER TO {{ postgres_user }};
            CREATE SEQUENCE public.patients_id_seq AS integer START WITH 1 INCREMENT BY 1 NO MINVALUE NO MAXVALUE CACHE 1;
            ALTER SEQUENCE public.patients_id_seq OWNER TO {{ postgres_user }};

            -- Tables
            CREATE TABLE public.appointments (
                id integer NOT NULL DEFAULT nextval('public.appointments_id_seq'::regclass),
                patient_id integer,
                doctor_id integer,
                date timestamp without time zone NOT NULL,
                status character varying(50) DEFAULT 'Booked'
            );
            ALTER TABLE public.appointments OWNER TO {{ postgres_user }};

            CREATE TABLE public.doctors (
                id integer NOT NULL DEFAULT nextval('public.doctors_id_seq'::regclass),
                name character varying(100) NOT NULL,
                email character varying(100) NOT NULL UNIQUE,
                password character varying(100) NOT NULL,
                specialty character varying(100),
                schedule jsonb
            );
            ALTER TABLE public.doctors OWNER TO {{ postgres_user }};

            CREATE TABLE public.patients (
                id integer NOT NULL DEFAULT nextval('public.patients_id_seq'::regclass),
                name character varying(100) NOT NULL,
                email character varying(100) NOT NULL UNIQUE,
                password character varying(255) NOT NULL,
                created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP
            );
            ALTER TABLE public.patients OWNER TO {{ postgres_user }};

            -- Primary Keys
            ALTER TABLE ONLY public.appointments ADD CONSTRAINT appointments_pkey PRIMARY KEY (id);
            ALTER TABLE ONLY public.doctors ADD CONSTRAINT doctors_pkey PRIMARY KEY (id);
            ALTER TABLE ONLY public.patients ADD CONSTRAINT patients_pkey PRIMARY KEY (id);

            -- Foreign Keys
            ALTER TABLE ONLY public.appointments
                ADD CONSTRAINT appointments_patient_id_fkey FOREIGN KEY (patient_id) REFERENCES public.patients(id);
            ALTER TABLE ONLY public.appointments
                ADD CONSTRAINT appointments_doctor_id_fkey FOREIGN KEY (doctor_id) REFERENCES public.doctors(id);

            -- Sample Data
            INSERT INTO public.patients (name, email, password, created_at) VALUES
            ('Juozas', 'juozas@gmail.com', '$2b$12$cxi0al.1cCPJFpC96gqcEuAHmq3gAsQPkZvKSW0AtVya1j4KBDC4i', '2024-11-05 13:23:59.220456'),
            ('Sandra', 'sandrute@gmail.com', '$2b$12$cxi0al.1cCPJFpC96gqcEuAHmq3gAsQPkZvKSW0AtVya1j4KBDC4i', '2024-11-12 15:24:25.125188'),
            ('Saule', 'saule.giedraite@gmail.com', '$2b$12$cxi0al.1cCPJFpC96gqcEuAHmq3gAsQPkZvKSW0AtVya1j4KBDC4i', '2024-11-12 16:33:14.192538'),
            ('Tomas', 'tomas.b@gmail.com', '$2b$12$cxi0al.1cCPJFpC96gqcEuAHmq3gAsQPkZvKSW0AtVya1j4KBDC4i', '2024-11-12 16:43:58.792344'),
            ('Rokas', 'rokas2012@gmail.com', '$2b$12$cxi0al.1cCPJFpC96gqcEuAHmq3gAsQPkZvKSW0AtVya1j4KBDC4i', '2024-11-12 17:54:52.831223'),
            ('Vanesa', 'vanessax@gmail.com', '$2b$12$cxi0al.1cCPJFpC96gqcEuAHmq3gAsQPkZvKSW0AtVya1j4KBDC4i', '2024-11-13 10:11:44.663372'),
            ('Greta', 'gre.bun11@gmail.com', '$2b$12$cxi0al.1cCPJFpC96gqcEuAHmq3gAsQPkZvKSW0AtVya1j4KBDC4i', '2024-11-13 12:13:11.279166'),
            ('Tomas', 'kimparas.tomas@gmail.com', '$2b$12$cxi0al.1cCPJFpC96gqcEuAHmq3gAsQPkZvKSW0AtVya1j4KBDC4i', '2024-11-15 19:34:23.552871'),
            ('Dominyka', 'domidomi@gmail.com', '$2b$12$cxi0al.1cCPJFpC96gqcEuAHmq3gAsQPkZvKSW0AtVya1j4KBDC4i', '2024-11-16 12:51:28.721193'),
            ('Kipras', 'kipro900@gmail.com', '$2b$12$cxi0al.1cCPJFpC96gqcEuAHmq3gAsQPkZvKSW0AtVya1j4KBDC4i', '2024-11-16 14:12:12.592214'),
            ('Vilius', 'vilius.m@gmail.com', '$2b$12$cxi0al.1cCPJFpC96gqcEuAHmq3gAsQPkZvKSW0AtVya1j4KBDC4i', '2024-11-16 15:22:47.741982'),
            ('Egle', 'egle.bagdanskyte@gmail.com', '$2b$12$cxi0al.1cCPJFpC96gqcEuAHmq3gAsQPkZvKSW0AtVya1j4KBDC4i', '2024-11-17 09:18:31.314522'),
            ('Jurate', 'jurateverniene@gmail.com', '$2b$12$cxi0al.1cCPJFpC96gqcEuAHmq3gAsQPkZvKSW0AtVya1j4KBDC4i', '2024-11-17 11:25:06.575168'),
            ('Martynas', 'marcius.jo@gmail.com', '$2b$12$cxi0al.1cCPJFpC96gqcEuAHmq3gAsQPkZvKSW0AtVya1j4KBDC4i', '2024-11-17 14:33:15.148738'),
            ('Marius', 'gentvilas.marius@gmail.com', '$2b$12$cxi0al.1cCPJFpC96gqcEuAHmq3gAsQPkZvKSW0AtVya1j4KBDC4i', '2024-11-17 16:42:53.983710');


            INSERT INTO public.doctors (name, email, password, specialty, schedule) VALUES
            ('Ignas', 'daktaras.ignas@gmail.com', '$2b$12$e.xifCG2uB4KEyDVpLs8a.jc4a/bei64ZppXJWIp13GYPJEY49FPq', 'Psychiatrist', NULL),
            ('Indre', 'indresdarbo@gmail.com', '$2b$12$e.xifCG2uB4KEyDVpLs8a.jc4a/bei64ZppXJWIp13GYPJEY49FPq', 'Dermatologist', NULL),
            ('Kristijanas', 'kristis1933@gmail.com', '$2b$12$e.xifCG2uB4KEyDVpLs8a.jc4a/bei64ZppXJWIp13GYPJEY49FPq', 'Neurologist', NULL),
            ('Danute', 'danute.laudiene@gmail.com', '$2b$12$e.xifCG2uB4KEyDVpLs8a.jc4a/bei64ZppXJWIp13GYPJEY49FPq', 'Radiologist', NULL);


            INSERT INTO public.appointments (patient_id, doctor_id, date, status) VALUES
            (1, 1, '2024-11-13 00:00:00', 'Booked'),
            (1, 2, '2024-11-02 00:00:00', 'Booked'),
            (5, 3, '2024-11-05 00:00:00', 'Booked'),
            (6, 2, '2024-11-06 00:00:00', 'Booked'),
            (8, 4, '2024-11-18 14:00:00', 'Booked'),
            (2, 1, '2024-11-19 10:00:00', 'Booked'),
            (9, 4, '2024-11-20 00:00:00', 'Booked'),
            (11, 3, '2024-11-21 15:30:00', 'Booked'),
            (3, 4, '2024-11-22 00:00:00', 'Booked');

            -- Set Sequence Values
            SELECT pg_catalog.setval('public.appointments_id_seq', 10, true);
            SELECT pg_catalog.setval('public.doctors_id_seq', 5, true);
            SELECT pg_catalog.setval('public.patients_id_seq', 16, true);

      - name: Pull PostgreSQL Docker image with retry logic
        docker_image:
          name: postgres:latest
          source: pull
        register: docker_pull
        retries: 3
        delay: 10
        until: docker_pull.failed == false

      - name: Run PostgreSQL Docker container
        docker_container:
          name: postgres-container
          image: postgres
          state: started
          restart_policy: always
          env_file: "{{ postgres_env_file }}"
          ports:
            - "{{ postgres_port }}:5432"
          volumes:
            - "{{ init_sql_file }}:/docker-entrypoint-initdb.d/init.sql"
        retries: 3
        delay: 10
        until: docker_pull.failed == false

      - name: Verify PostgreSQL container is running
        shell: docker ps --filter "name=postgres-container" --format "{{ '{{.Names}}' }}"
        register: result
        retries: 3
        delay: 10
        until: result.stdout != ""

      - name: Debug PostgreSQL container name
        debug:
          var: running_containers.stdout

      - name: Display PostgreSQL container logs
        shell: docker logs my-postgres
        register: postgres_logs
        failed_when: false

      - name: Debug PostgreSQL container logs
        debug:
          var: postgres_logs.stdout
