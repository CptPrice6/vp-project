---
- name: Deploy Hospital System with Docker
  hosts: webserver
  become: yes
  vars:
    # Define .env file content
    env_file_content: |
      DATABASE_HOST=localhost
      DATABASE_USER=hospitaluser
      DATABASE_PASSWORD=password123
      DATABASE_NAME=hospitaldb
      DATABASE_PORT=5432
 
  tasks:
    - name: Update apt package list
      apt:
        update_cache: yes
 
    - name: Install required packages for HTTPS
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - software-properties-common
          - git
        state: present
 
    - name: Add Docker GPG key
      apt_key:
        url: https://download.docker.com/linux/debian/gpg
        state: present
 
    - name: Set up Docker stable repository
      apt_repository:
        repo: "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/debian {{ ansible_lsb.codename }} stable"
        state: present
 
    - name: Update apt package list again
      apt:
        update_cache: yes
 
    - name: Install Docker
      apt:
        name: docker-ce
        state: present
 
    - name: Ensure Docker is running
      systemd:
        name: docker
        state: started
        enabled: yes
 
    - name: Clone Hospital System repository
      git:
        repo: https://github.com/CptPrice6/hospital-system.git
        dest: /home/hospital-system
        update: yes
 
    - name: Create .env file in hospital system directory
      copy:
        content: "{{ env_file_content }}"
        dest: /home/hospital-system/.env
        mode: '0644'
 
    - name: Build Docker image
      command: docker build -t hospital-system .
      args:
        chdir: /home/hospital-system
      register: docker_build
      ignore_errors: yes
 
    - name: Run Docker container
      command: docker run -d -p 3000:3000 --name hospital-system --env-file /home/hospital-system/.env hospital-system
      register: docker_run
      async: 1
      poll: 0
 
    - name: Wait for Docker container to start
      wait_for:
        port: 3000
        delay: 5
        timeout: 30
 
    - name: Verify application is running
      uri:
        url: http://localhost:3000
        return_content: yes
      register: app_response
 
    - name: Display response
      debug:
        var: app_response.content
 
