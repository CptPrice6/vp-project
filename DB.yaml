---
- name: Setup PostgreSQL on db-vm using Docker
  hosts: db
  become: true

  vars:
    postgres_user: "hospitaluser"
    postgres_password: "password123"
    postgres_db: "hospitaldb"
    postgres_port: 5432
    postgres_env_file: /opt/postgres.env
    init_sql_file: /opt/init.sql

  tasks:
    - name: Update apt packages
      apt:
        update_cache: yes

    - name: Ensure required Python packages are installed
      apt:
        name:
          - python3-pip
          - python3-requests
        state: present

    - name: Install prerequisites
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - software-properties-common
        state: present

    - name: Add Docker GPG key
      apt_key:
        url: https://download.docker.com/linux/debian/gpg
        state: present
        keyring: /usr/share/keyrings/docker-archive-keyring.gpg

    - name: Add Docker repository
      copy:
        dest: /etc/apt/sources.list.d/docker.list
        content: "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/debian {{ ansible_facts['lsb']['codename'] }} stable"

    - name: Update apt cache
      apt:
        update_cache: yes

    - name: Install Docker packages
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
        state: present

    - name: Ensure Docker service is running
      service:
        name: docker
        state: started
        enabled: true

    - name: Create environment file for PostgreSQL
      copy:
        dest: "{{ postgres_env_file }}"
        content: |
          POSTGRES_USER={{ postgres_user }}
          POSTGRES_PASSWORD={{ postgres_password }}
          POSTGRES_DB={{ postgres_db }}
        mode: "0644"

    - name: Create init.sql file with schema, sequences, constraints, and data
      copy:
        dest: "{{ init_sql_file }}"
        content: |
          -- Database initialization script

          -- Basic settings
          SET statement_timeout = 0;
          SET lock_timeout = 0;
          SET idle_in_transaction_session_timeout = 0;
          SET client_encoding = 'UTF8';
          SET standard_conforming_strings = on;
          SELECT pg_catalog.set_config('search_path', '', false);
          SET check_function_bodies = false;
          SET xmloption = content;
          SET client_min_messages = warning;
          SET row_security = off;

          -- Sequences
          CREATE SEQUENCE public.appointments_id_seq AS integer START WITH 1 INCREMENT BY 1 NO MINVALUE NO MAXVALUE CACHE 1;
          ALTER SEQUENCE public.appointments_id_seq OWNER TO {{ postgres_user }};
          CREATE SEQUENCE public.doctors_id_seq AS integer START WITH 1 INCREMENT BY 1 NO MINVALUE NO MAXVALUE CACHE 1;
          ALTER SEQUENCE public.doctors_id_seq OWNER TO {{ postgres_user }};
          CREATE SEQUENCE public.patients_id_seq AS integer START WITH 1 INCREMENT BY 1 NO MINVALUE NO MAXVALUE CACHE 1;
          ALTER SEQUENCE public.patients_id_seq OWNER TO {{ postgres_user }};

          -- Tables
          CREATE TABLE public.appointments (
              id integer NOT NULL DEFAULT nextval('public.appointments_id_seq'::regclass),
              patient_id integer,
              doctor_id integer,
              date timestamp without time zone NOT NULL,
              status character varying(50) DEFAULT 'Booked'
          );
          ALTER TABLE public.appointments OWNER TO {{ postgres_user }};

          CREATE TABLE public.doctors (
              id integer NOT NULL DEFAULT nextval('public.doctors_id_seq'::regclass),
              name character varying(100) NOT NULL,
              email character varying(100) NOT NULL UNIQUE,
              password character varying(100) NOT NULL,
              specialty character varying(100),
              schedule jsonb
          );
          ALTER TABLE public.doctors OWNER TO {{ postgres_user }};

          CREATE TABLE public.patients (
              id integer NOT NULL DEFAULT nextval('public.patients_id_seq'::regclass),
              name character varying(100) NOT NULL,
              email character varying(100) NOT NULL UNIQUE,
              password character varying(255) NOT NULL,
              created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP
          );
          ALTER TABLE public.patients OWNER TO {{ postgres_user }};

          -- Primary Keys
          ALTER TABLE ONLY public.appointments ADD CONSTRAINT appointments_pkey PRIMARY KEY (id);
          ALTER TABLE ONLY public.doctors ADD CONSTRAINT doctors_pkey PRIMARY KEY (id);
          ALTER TABLE ONLY public.patients ADD CONSTRAINT patients_pkey PRIMARY KEY (id);

          -- Foreign Keys
          ALTER TABLE ONLY public.appointments
              ADD CONSTRAINT appointments_patient_id_fkey FOREIGN KEY (patient_id) REFERENCES public.patients(id);
          ALTER TABLE ONLY public.appointments
              ADD CONSTRAINT appointments_doctor_id_fkey FOREIGN KEY (doctor_id) REFERENCES public.doctors(id);

          -- Sample Data
          INSERT INTO public.patients (id, name, email, password, created_at) VALUES
          (18, 'Domantas Petkevicius', 'domasp902@gmail.com', '$2b$10$kzl.T1rdVfXZ8hTu5AFwt.beQ0T8WdVSVz73Zfu7daLI0PQEndjj6', '2024-11-05 12:45:43.192443'),
          (19, 'Domantas', 'domasp222@gmail.com', '$2b$10$xeOi8es3eZbxoff6J08wbOdztQjXMzbuVwyFMjU7dmusIaTkOjQl.', '2024-11-05 12:55:50.851921'),
          (24, 'Juozas', 'juozas@gmail.com', '$2b$10$FEUq/CNzKsC8VxmNbpxrYuY4qTZfYQFDnue6eSuIx6Uf/Fe7mku7.', '2024-11-05 13:23:59.220456');

          INSERT INTO public.doctors (id, name, email, password, specialty, schedule) VALUES
          (32, 'Evelina', 'domasp333@gmail.com', '$2b$10$ZA8JrFZqnYgeCvQ7gajzduRhjM2.00Oyj8zba56FXcm.rbfT9VZta', 'cardiologist', NULL),
          (1, 'Domantas', 'domasp902@gmail.com', '$2b$10$ECBwuvHytyhMvvTldAAJC.1UIQlsBqbK5zIHgf2qeavhaY0iR7czy', 'Surgeon', NULL);

          INSERT INTO public.appointments (patient_id, doctor_id, date, status) VALUES
          (19, 32, '2024-11-13 00:00:00', 'Booked'),
          (24, 1, '2024-11-02 00:00:00', 'Booked'),
          (24, 32, '2024-11-05 00:00:00', 'Booked');

          -- Set Sequence Values
          SELECT pg_catalog.setval('public.appointments_id_seq', 15, true);
          SELECT pg_catalog.setval('public.doctors_id_seq', 33, true);
          SELECT pg_catalog.setval('public.patients_id_seq', 24, true);

    - name: Run PostgreSQL Docker container
      docker_container:
        name: my-postgres
        image: postgres
        env_file: "{{ postgres_env_file }}"
        ports:
          - "{{ postgres_port }}:5432"
        volumes:
          - "{{ init_sql_file }}:/docker-entrypoint-initdb.d/init.sql"
        state: started

    - name: Verify PostgreSQL container is running
      shell: docker ps --filter "name=my-postgres" --format "{{ '{{.Names}}' }}"
      register: running_containers

    - name: Debug PostgreSQL container name
      debug:
        var: running_containers.stdout

    - name: Display PostgreSQL container logs
      shell: docker logs my-postgres
      register: postgres_logs
      failed_when: false

    - name: Debug PostgreSQL container logs
      debug:
        var: postgres_logs.stdout
